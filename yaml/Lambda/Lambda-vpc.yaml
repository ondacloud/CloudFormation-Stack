Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "<env>"

Resources:
  #Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Lambda-SG"
      VpcId:
        Fn::ImportValue: <env>-stack-VPC-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-SG

  #Lambda IAM
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-lambda-role
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  
  #Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${EnvironmentName}-funtion
      Runtime: <Value> #nodejs18.x, python3.11
      Architectures: 
        - arm64 #arm64 or x86_64
      Code: 
        ZipFile: !Sub |
          <script>
      MemorySize: 3008
      Handler: index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      VpcConfig:
        SecurityGroupIds: 
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - Fn::ImportValue: <env>-stack-VPC-private-a
          - Fn::ImportValue: <env>-stack-VPC-private-b
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda